# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel
from fingerprint_pro_server_api_sdk.models.geolocation_city import GeolocationCity
from fingerprint_pro_server_api_sdk.models.geolocation_country import GeolocationCountry
from fingerprint_pro_server_api_sdk.models.geolocation_continent import GeolocationContinent
from fingerprint_pro_server_api_sdk.models.geolocation_subdivisions import GeolocationSubdivisions


class DeprecatedGeolocation(BaseModel):
    """
    This field is **deprecated** and will not return a result for **applications created after January 23rd, 2024**.  Please use the [IP Geolocation Smart signal](https://dev.fingerprint.com/docs/smart-signals-overview#ip-geolocation) for geolocation information.

    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accuracy_radius': 'int',
        'latitude': 'float',
        'longitude': 'float',
        'postal_code': 'str',
        'timezone': 'str',
        'city': 'GeolocationCity',
        'country': 'GeolocationCountry',
        'continent': 'GeolocationContinent',
        'subdivisions': 'GeolocationSubdivisions'
    }

    attribute_map = {
        'accuracy_radius': 'accuracyRadius',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'postal_code': 'postalCode',
        'timezone': 'timezone',
        'city': 'city',
        'country': 'country',
        'continent': 'continent',
        'subdivisions': 'subdivisions'
    }

    def __init__(self, accuracy_radius=None, latitude=None, longitude=None, postal_code=None, timezone=None, city=None, country=None, continent=None, subdivisions=None):  # noqa: E501
        """DeprecatedGeolocation - a model defined in Swagger"""  # noqa: E501
        self._accuracy_radius = None
        self._latitude = None
        self._longitude = None
        self._postal_code = None
        self._timezone = None
        self._city = None
        self._country = None
        self._continent = None
        self._subdivisions = None
        self.discriminator = None
        if accuracy_radius is not None:
            self.accuracy_radius = accuracy_radius
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if postal_code is not None:
            self.postal_code = postal_code
        if timezone is not None:
            self.timezone = timezone
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if continent is not None:
            self.continent = continent
        if subdivisions is not None:
            self.subdivisions = subdivisions

    @property
    def accuracy_radius(self) -> Optional[int]:
        """Gets the accuracy_radius of this DeprecatedGeolocation.  # noqa: E501

        The IP address is likely to be within this radius (in km) of the specified location.  # noqa: E501

        :return: The accuracy_radius of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._accuracy_radius

    @accuracy_radius.setter
    def accuracy_radius(self, accuracy_radius: Optional[int]):
        """Sets the accuracy_radius of this DeprecatedGeolocation.

        The IP address is likely to be within this radius (in km) of the specified location.  # noqa: E501

        :param accuracy_radius: The accuracy_radius of this DeprecatedGeolocation.  # noqa: E501
        """

        self._accuracy_radius = accuracy_radius

    @property
    def latitude(self) -> Optional[float]:
        """Gets the latitude of this DeprecatedGeolocation.  # noqa: E501


        :return: The latitude of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: Optional[float]):
        """Sets the latitude of this DeprecatedGeolocation.


        :param latitude: The latitude of this DeprecatedGeolocation.  # noqa: E501
        """

        self._latitude = latitude

    @property
    def longitude(self) -> Optional[float]:
        """Gets the longitude of this DeprecatedGeolocation.  # noqa: E501


        :return: The longitude of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: Optional[float]):
        """Sets the longitude of this DeprecatedGeolocation.


        :param longitude: The longitude of this DeprecatedGeolocation.  # noqa: E501
        """

        self._longitude = longitude

    @property
    def postal_code(self) -> Optional[str]:
        """Gets the postal_code of this DeprecatedGeolocation.  # noqa: E501


        :return: The postal_code of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code: Optional[str]):
        """Sets the postal_code of this DeprecatedGeolocation.


        :param postal_code: The postal_code of this DeprecatedGeolocation.  # noqa: E501
        """

        self._postal_code = postal_code

    @property
    def timezone(self) -> Optional[str]:
        """Gets the timezone of this DeprecatedGeolocation.  # noqa: E501


        :return: The timezone of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: Optional[str]):
        """Sets the timezone of this DeprecatedGeolocation.


        :param timezone: The timezone of this DeprecatedGeolocation.  # noqa: E501
        """

        self._timezone = timezone

    @property
    def city(self) -> Optional[GeolocationCity]:
        """Gets the city of this DeprecatedGeolocation.  # noqa: E501


        :return: The city of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._city

    @city.setter
    def city(self, city: Optional[GeolocationCity]):
        """Sets the city of this DeprecatedGeolocation.


        :param city: The city of this DeprecatedGeolocation.  # noqa: E501
        """

        self._city = city

    @property
    def country(self) -> Optional[GeolocationCountry]:
        """Gets the country of this DeprecatedGeolocation.  # noqa: E501


        :return: The country of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._country

    @country.setter
    def country(self, country: Optional[GeolocationCountry]):
        """Sets the country of this DeprecatedGeolocation.


        :param country: The country of this DeprecatedGeolocation.  # noqa: E501
        """

        self._country = country

    @property
    def continent(self) -> Optional[GeolocationContinent]:
        """Gets the continent of this DeprecatedGeolocation.  # noqa: E501


        :return: The continent of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._continent

    @continent.setter
    def continent(self, continent: Optional[GeolocationContinent]):
        """Sets the continent of this DeprecatedGeolocation.


        :param continent: The continent of this DeprecatedGeolocation.  # noqa: E501
        """

        self._continent = continent

    @property
    def subdivisions(self) -> Optional[GeolocationSubdivisions]:
        """Gets the subdivisions of this DeprecatedGeolocation.  # noqa: E501


        :return: The subdivisions of this DeprecatedGeolocation.  # noqa: E501
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions: Optional[GeolocationSubdivisions]):
        """Sets the subdivisions of this DeprecatedGeolocation.


        :param subdivisions: The subdivisions of this DeprecatedGeolocation.  # noqa: E501
        """

        self._subdivisions = subdivisions

