# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel
from fingerprint_pro_server_api_sdk.models.botd_bot import BotdBot
from fingerprint_pro_server_api_sdk.models.tag import Tag
from datetime import datetime


class Botd(BaseModel):
    """
    Contains all the information from Bot Detection product

    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bot': 'BotdBot',
        'meta': 'Tag',
        'linked_id': 'str',
        'url': 'str',
        'ip': 'str',
        'time': 'datetime',
        'user_agent': 'str',
        'request_id': 'str'
    }

    attribute_map = {
        'bot': 'bot',
        'meta': 'meta',
        'linked_id': 'linkedId',
        'url': 'url',
        'ip': 'ip',
        'time': 'time',
        'user_agent': 'userAgent',
        'request_id': 'requestId'
    }

    def __init__(self, bot=None, meta=None, linked_id=None, url=None, ip=None, time=None, user_agent=None, request_id=None):  # noqa: E501
        """Botd - a model defined in Swagger"""  # noqa: E501
        self._bot = None
        self._meta = None
        self._linked_id = None
        self._url = None
        self._ip = None
        self._time = None
        self._user_agent = None
        self._request_id = None
        self.discriminator = None
        self.bot = bot
        if meta is not None:
            self.meta = meta
        if linked_id is not None:
            self.linked_id = linked_id
        self.url = url
        self.ip = ip
        self.time = time
        self.user_agent = user_agent
        self.request_id = request_id

    @property
    def bot(self) -> BotdBot:
        """Gets the bot of this Botd.  # noqa: E501


        :return: The bot of this Botd.  # noqa: E501
        """
        return self._bot

    @bot.setter
    def bot(self, bot: BotdBot):
        """Sets the bot of this Botd.


        :param bot: The bot of this Botd.  # noqa: E501
        """
        if bot is None:
            raise ValueError("Invalid value for `bot`, must not be `None`")  # noqa: E501

        self._bot = bot

    @property
    def meta(self) -> Optional[Tag]:
        """Gets the meta of this Botd.  # noqa: E501


        :return: The meta of this Botd.  # noqa: E501
        """
        return self._meta

    @meta.setter
    def meta(self, meta: Optional[Tag]):
        """Sets the meta of this Botd.


        :param meta: The meta of this Botd.  # noqa: E501
        """

        self._meta = meta

    @property
    def linked_id(self) -> Optional[str]:
        """Gets the linked_id of this Botd.  # noqa: E501

        A customer-provided id that was sent with the request.  # noqa: E501

        :return: The linked_id of this Botd.  # noqa: E501
        """
        return self._linked_id

    @linked_id.setter
    def linked_id(self, linked_id: Optional[str]):
        """Sets the linked_id of this Botd.

        A customer-provided id that was sent with the request.  # noqa: E501

        :param linked_id: The linked_id of this Botd.  # noqa: E501
        """

        self._linked_id = linked_id

    @property
    def url(self) -> str:
        """Gets the url of this Botd.  # noqa: E501

        Page URL from which the request was sent.  # noqa: E501

        :return: The url of this Botd.  # noqa: E501
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Botd.

        Page URL from which the request was sent.  # noqa: E501

        :param url: The url of this Botd.  # noqa: E501
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def ip(self) -> str:
        """Gets the ip of this Botd.  # noqa: E501

        IP address of the requesting browser or bot.  # noqa: E501

        :return: The ip of this Botd.  # noqa: E501
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Botd.

        IP address of the requesting browser or bot.  # noqa: E501

        :param ip: The ip of this Botd.  # noqa: E501
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def time(self) -> datetime:
        """Gets the time of this Botd.  # noqa: E501

        Time in UTC when the request from the JS agent was made. We recommend to treat requests that are older than 2 minutes as malicious. Otherwise, request replay attacks are possible.  # noqa: E501

        :return: The time of this Botd.  # noqa: E501
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Botd.

        Time in UTC when the request from the JS agent was made. We recommend to treat requests that are older than 2 minutes as malicious. Otherwise, request replay attacks are possible.  # noqa: E501

        :param time: The time of this Botd.  # noqa: E501
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def user_agent(self) -> str:
        """Gets the user_agent of this Botd.  # noqa: E501


        :return: The user_agent of this Botd.  # noqa: E501
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent: str):
        """Sets the user_agent of this Botd.


        :param user_agent: The user_agent of this Botd.  # noqa: E501
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")  # noqa: E501

        self._user_agent = user_agent

    @property
    def request_id(self) -> str:
        """Gets the request_id of this Botd.  # noqa: E501

        Unique identifier of the user's request.  # noqa: E501

        :return: The request_id of this Botd.  # noqa: E501
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this Botd.

        Unique identifier of the user's request.  # noqa: E501

        :param request_id: The request_id of this Botd.  # noqa: E501
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

