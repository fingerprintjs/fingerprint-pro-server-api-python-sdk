# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel


class WebhookTampering(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'bool',
        'anomaly_score': 'float',
        'anti_detect_browser': 'bool'
    }

    attribute_map = {
        'result': 'result',
        'anomaly_score': 'anomalyScore',
        'anti_detect_browser': 'antiDetectBrowser'
    }

    def __init__(self, result=None, anomaly_score=None, anti_detect_browser=None):  # noqa: E501
        """WebhookTampering - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._anomaly_score = None
        self._anti_detect_browser = None
        self.discriminator = None
        if result is not None:
            self.result = result
        if anomaly_score is not None:
            self.anomaly_score = anomaly_score
        if anti_detect_browser is not None:
            self.anti_detect_browser = anti_detect_browser

    @property
    def result(self) -> Optional[bool]:
        """Gets the result of this WebhookTampering.  # noqa: E501

        Flag indicating browser tampering was detected. This happens when either of these conditions is true:   * There are inconsistencies in the browser configuration that cross our internal tampering thresholds (indicated by `anomalyScore`).   * The browser signature resembles one of \"anti-detect\" browsers specifically designed to evade identification and fingerprinting, for example, Incognition (indicated by `antiDetectBrowser`).   # noqa: E501

        :return: The result of this WebhookTampering.  # noqa: E501
        """
        return self._result

    @result.setter
    def result(self, result: Optional[bool]):
        """Sets the result of this WebhookTampering.

        Flag indicating browser tampering was detected. This happens when either of these conditions is true:   * There are inconsistencies in the browser configuration that cross our internal tampering thresholds (indicated by `anomalyScore`).   * The browser signature resembles one of \"anti-detect\" browsers specifically designed to evade identification and fingerprinting, for example, Incognition (indicated by `antiDetectBrowser`).   # noqa: E501

        :param result: The result of this WebhookTampering.  # noqa: E501
        """

        self._result = result

    @property
    def anomaly_score(self) -> Optional[float]:
        """Gets the anomaly_score of this WebhookTampering.  # noqa: E501

        Confidence score (`0.0 - 1.0`) for tampering detection:   * Values above `0.5` indicate that there was a tampering attempt   * Values below `0.5` indicate genuine browsers.   # noqa: E501

        :return: The anomaly_score of this WebhookTampering.  # noqa: E501
        """
        return self._anomaly_score

    @anomaly_score.setter
    def anomaly_score(self, anomaly_score: Optional[float]):
        """Sets the anomaly_score of this WebhookTampering.

        Confidence score (`0.0 - 1.0`) for tampering detection:   * Values above `0.5` indicate that there was a tampering attempt   * Values below `0.5` indicate genuine browsers.   # noqa: E501

        :param anomaly_score: The anomaly_score of this WebhookTampering.  # noqa: E501
        """

        self._anomaly_score = anomaly_score

    @property
    def anti_detect_browser(self) -> Optional[bool]:
        """Gets the anti_detect_browser of this WebhookTampering.  # noqa: E501

        Is `true` if the identified browser resembles one of \"anti-detect\" browsers, for example, Incognition. Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations.  # noqa: E501

        :return: The anti_detect_browser of this WebhookTampering.  # noqa: E501
        """
        return self._anti_detect_browser

    @anti_detect_browser.setter
    def anti_detect_browser(self, anti_detect_browser: Optional[bool]):
        """Sets the anti_detect_browser of this WebhookTampering.

        Is `true` if the identified browser resembles one of \"anti-detect\" browsers, for example, Incognition. Anti-detect browsers try to evade identification by masking or manipulating their fingerprint to imitate legitimate browser configurations.  # noqa: E501

        :param anti_detect_browser: The anti_detect_browser of this WebhookTampering.  # noqa: E501
        """

        self._anti_detect_browser = anti_detect_browser

