# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel


class GeolocationSubdivision(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iso_code': 'str',
        'name': 'str'
    }

    attribute_map = {
        'iso_code': 'isoCode',
        'name': 'name'
    }

    def __init__(self, iso_code=None, name=None):  # noqa: E501
        """GeolocationSubdivision - a model defined in Swagger"""  # noqa: E501
        self._iso_code = None
        self._name = None
        self.discriminator = None
        self.iso_code = iso_code
        self.name = name

    @property
    def iso_code(self) -> str:
        """Gets the iso_code of this GeolocationSubdivision.  # noqa: E501


        :return: The iso_code of this GeolocationSubdivision.  # noqa: E501
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code: str):
        """Sets the iso_code of this GeolocationSubdivision.


        :param iso_code: The iso_code of this GeolocationSubdivision.  # noqa: E501
        """
        if iso_code is None:
            raise ValueError("Invalid value for `iso_code`, must not be `None`")  # noqa: E501

        self._iso_code = iso_code

    @property
    def name(self) -> str:
        """Gets the name of this GeolocationSubdivision.  # noqa: E501


        :return: The name of this GeolocationSubdivision.  # noqa: E501
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GeolocationSubdivision.


        :param name: The name of this GeolocationSubdivision.  # noqa: E501
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

