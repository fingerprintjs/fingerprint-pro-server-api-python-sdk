# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel


class IdentificationConfidence(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'score': 'float',
        'revision': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'score': 'score',
        'revision': 'revision',
        'comment': 'comment'
    }

    def __init__(self, score=None, revision=None, comment=None):  # noqa: E501
        """IdentificationConfidence - a model defined in Swagger"""  # noqa: E501
        self._score = None
        self._revision = None
        self._comment = None
        self.discriminator = None
        self.score = score
        if revision is not None:
            self.revision = revision
        if comment is not None:
            self.comment = comment

    @property
    def score(self) -> float:
        """Gets the score of this IdentificationConfidence.  # noqa: E501

        The confidence score is a floating-point number between 0 and 1 that represents the probability of accurate identification.  # noqa: E501

        :return: The score of this IdentificationConfidence.  # noqa: E501
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this IdentificationConfidence.

        The confidence score is a floating-point number between 0 and 1 that represents the probability of accurate identification.  # noqa: E501

        :param score: The score of this IdentificationConfidence.  # noqa: E501
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def revision(self) -> Optional[str]:
        """Gets the revision of this IdentificationConfidence.  # noqa: E501

        The revision name of the method used to calculate the Confidence score. This field is only present for customers who opted in to an alternative calculation method.  # noqa: E501

        :return: The revision of this IdentificationConfidence.  # noqa: E501
        """
        return self._revision

    @revision.setter
    def revision(self, revision: Optional[str]):
        """Sets the revision of this IdentificationConfidence.

        The revision name of the method used to calculate the Confidence score. This field is only present for customers who opted in to an alternative calculation method.  # noqa: E501

        :param revision: The revision of this IdentificationConfidence.  # noqa: E501
        """

        self._revision = revision

    @property
    def comment(self) -> Optional[str]:
        """Gets the comment of this IdentificationConfidence.  # noqa: E501


        :return: The comment of this IdentificationConfidence.  # noqa: E501
        """
        return self._comment

    @comment.setter
    def comment(self, comment: Optional[str]):
        """Sets the comment of this IdentificationConfidence.


        :param comment: The comment of this IdentificationConfidence.  # noqa: E501
        """

        self._comment = comment

