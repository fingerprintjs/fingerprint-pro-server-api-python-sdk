# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel
from fingerprint_pro_server_api_sdk.models.geolocation import Geolocation
from fingerprint_pro_server_api_sdk.models.ip_info_asn import IPInfoASN
from fingerprint_pro_server_api_sdk.models.ip_info_data_center import IPInfoDataCenter


class IPInfoV4(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'geolocation': 'Geolocation',
        'asn': 'IPInfoASN',
        'datacenter': 'IPInfoDataCenter'
    }

    attribute_map = {
        'address': 'address',
        'geolocation': 'geolocation',
        'asn': 'asn',
        'datacenter': 'datacenter'
    }

    def __init__(self, address=None, geolocation=None, asn=None, datacenter=None):  # noqa: E501
        """IPInfoV4 - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._geolocation = None
        self._asn = None
        self._datacenter = None
        self.discriminator = None
        self.address = address
        self.geolocation = geolocation
        if asn is not None:
            self.asn = asn
        if datacenter is not None:
            self.datacenter = datacenter

    @property
    def address(self) -> str:
        """Gets the address of this IPInfoV4.  # noqa: E501


        :return: The address of this IPInfoV4.  # noqa: E501
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this IPInfoV4.


        :param address: The address of this IPInfoV4.  # noqa: E501
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def geolocation(self) -> Geolocation:
        """Gets the geolocation of this IPInfoV4.  # noqa: E501


        :return: The geolocation of this IPInfoV4.  # noqa: E501
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation: Geolocation):
        """Sets the geolocation of this IPInfoV4.


        :param geolocation: The geolocation of this IPInfoV4.  # noqa: E501
        """
        if geolocation is None:
            raise ValueError("Invalid value for `geolocation`, must not be `None`")  # noqa: E501

        self._geolocation = geolocation

    @property
    def asn(self) -> Optional[IPInfoASN]:
        """Gets the asn of this IPInfoV4.  # noqa: E501


        :return: The asn of this IPInfoV4.  # noqa: E501
        """
        return self._asn

    @asn.setter
    def asn(self, asn: Optional[IPInfoASN]):
        """Sets the asn of this IPInfoV4.


        :param asn: The asn of this IPInfoV4.  # noqa: E501
        """

        self._asn = asn

    @property
    def datacenter(self) -> Optional[IPInfoDataCenter]:
        """Gets the datacenter of this IPInfoV4.  # noqa: E501


        :return: The datacenter of this IPInfoV4.  # noqa: E501
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter: Optional[IPInfoDataCenter]):
        """Sets the datacenter of this IPInfoV4.


        :param datacenter: The datacenter of this IPInfoV4.  # noqa: E501
        """

        self._datacenter = datacenter

