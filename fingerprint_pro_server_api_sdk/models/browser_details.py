# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel


class BrowserDetails(BaseModel):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'browser_name': 'str',
        'browser_major_version': 'str',
        'browser_full_version': 'str',
        'os': 'str',
        'os_version': 'str',
        'device': 'str',
        'user_agent': 'str'
    }

    attribute_map = {
        'browser_name': 'browserName',
        'browser_major_version': 'browserMajorVersion',
        'browser_full_version': 'browserFullVersion',
        'os': 'os',
        'os_version': 'osVersion',
        'device': 'device',
        'user_agent': 'userAgent'
    }

    def __init__(self, browser_name=None, browser_major_version=None, browser_full_version=None, os=None, os_version=None, device=None, user_agent=None):  # noqa: E501
        """BrowserDetails - a model defined in Swagger"""  # noqa: E501
        self._browser_name = None
        self._browser_major_version = None
        self._browser_full_version = None
        self._os = None
        self._os_version = None
        self._device = None
        self._user_agent = None
        self.discriminator = None
        self.browser_name = browser_name
        self.browser_major_version = browser_major_version
        self.browser_full_version = browser_full_version
        self.os = os
        self.os_version = os_version
        self.device = device
        self.user_agent = user_agent

    @property
    def browser_name(self) -> str:
        """Gets the browser_name of this BrowserDetails.  # noqa: E501


        :return: The browser_name of this BrowserDetails.  # noqa: E501
        """
        return self._browser_name

    @browser_name.setter
    def browser_name(self, browser_name: str):
        """Sets the browser_name of this BrowserDetails.


        :param browser_name: The browser_name of this BrowserDetails.  # noqa: E501
        """
        if browser_name is None:
            raise ValueError("Invalid value for `browser_name`, must not be `None`")  # noqa: E501

        self._browser_name = browser_name

    @property
    def browser_major_version(self) -> str:
        """Gets the browser_major_version of this BrowserDetails.  # noqa: E501


        :return: The browser_major_version of this BrowserDetails.  # noqa: E501
        """
        return self._browser_major_version

    @browser_major_version.setter
    def browser_major_version(self, browser_major_version: str):
        """Sets the browser_major_version of this BrowserDetails.


        :param browser_major_version: The browser_major_version of this BrowserDetails.  # noqa: E501
        """
        if browser_major_version is None:
            raise ValueError("Invalid value for `browser_major_version`, must not be `None`")  # noqa: E501

        self._browser_major_version = browser_major_version

    @property
    def browser_full_version(self) -> str:
        """Gets the browser_full_version of this BrowserDetails.  # noqa: E501


        :return: The browser_full_version of this BrowserDetails.  # noqa: E501
        """
        return self._browser_full_version

    @browser_full_version.setter
    def browser_full_version(self, browser_full_version: str):
        """Sets the browser_full_version of this BrowserDetails.


        :param browser_full_version: The browser_full_version of this BrowserDetails.  # noqa: E501
        """
        if browser_full_version is None:
            raise ValueError("Invalid value for `browser_full_version`, must not be `None`")  # noqa: E501

        self._browser_full_version = browser_full_version

    @property
    def os(self) -> str:
        """Gets the os of this BrowserDetails.  # noqa: E501


        :return: The os of this BrowserDetails.  # noqa: E501
        """
        return self._os

    @os.setter
    def os(self, os: str):
        """Sets the os of this BrowserDetails.


        :param os: The os of this BrowserDetails.  # noqa: E501
        """
        if os is None:
            raise ValueError("Invalid value for `os`, must not be `None`")  # noqa: E501

        self._os = os

    @property
    def os_version(self) -> str:
        """Gets the os_version of this BrowserDetails.  # noqa: E501


        :return: The os_version of this BrowserDetails.  # noqa: E501
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version: str):
        """Sets the os_version of this BrowserDetails.


        :param os_version: The os_version of this BrowserDetails.  # noqa: E501
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")  # noqa: E501

        self._os_version = os_version

    @property
    def device(self) -> str:
        """Gets the device of this BrowserDetails.  # noqa: E501


        :return: The device of this BrowserDetails.  # noqa: E501
        """
        return self._device

    @device.setter
    def device(self, device: str):
        """Sets the device of this BrowserDetails.


        :param device: The device of this BrowserDetails.  # noqa: E501
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")  # noqa: E501

        self._device = device

    @property
    def user_agent(self) -> str:
        """Gets the user_agent of this BrowserDetails.  # noqa: E501


        :return: The user_agent of this BrowserDetails.  # noqa: E501
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent: str):
        """Sets the user_agent of this BrowserDetails.


        :param user_agent: The user_agent of this BrowserDetails.  # noqa: E501
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")  # noqa: E501

        self._user_agent = user_agent

