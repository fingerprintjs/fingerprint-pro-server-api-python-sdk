# coding: utf-8

"""
    Fingerprint Server API

    Fingerprint Server API allows you to search, update, and delete identification events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel


class SDK(BaseModel):
    """
    Contains information about the SDK used to perform the request.

    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platform': 'str',
        'version': 'str'
    }

    nullable_map = {
        'platform': False,
        'version': False
    }

    attribute_map = {
        'platform': 'platform',
        'version': 'version'
    }

    def __init__(self, platform=None, version=None):  # noqa: E501
        """SDK - a model defined in Swagger"""  # noqa: E501
        self._platform = None
        self._version = None
        self.discriminator = None
        self.platform = platform
        self.version = version

    @property
    def platform(self) -> str:
        """Gets the platform of this SDK.  # noqa: E501

        Platform of the SDK.  # noqa: E501

        :return: The platform of this SDK.  # noqa: E501
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this SDK.

        Platform of the SDK.  # noqa: E501

        :param platform: The platform of this SDK.  # noqa: E501
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def version(self) -> str:
        """Gets the version of this SDK.  # noqa: E501

        SDK version string.  # noqa: E501

        :return: The version of this SDK.  # noqa: E501
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this SDK.

        SDK version string.  # noqa: E501

        :param version: The version of this SDK.  # noqa: E501
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

