# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import re  # noqa: F401
from typing import Dict, List, Optional  # noqa: F401
from fingerprint_pro_server_api_sdk.base_model import BaseModel
from fingerprint_pro_server_api_sdk.models.botd_bot_result import BotdBotResult


class BotdBot(BaseModel):
    """
    Stores bot detection result

    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result': 'BotdBotResult',
        'type': 'str'
    }

    attribute_map = {
        'result': 'result',
        'type': 'type'
    }

    def __init__(self, result=None, type=None):  # noqa: E501
        """BotdBot - a model defined in Swagger"""  # noqa: E501
        self._result = None
        self._type = None
        self.discriminator = None
        self.result = result
        if type is not None:
            self.type = type

    @property
    def result(self) -> BotdBotResult:
        """Gets the result of this BotdBot.  # noqa: E501


        :return: The result of this BotdBot.  # noqa: E501
        """
        return self._result

    @result.setter
    def result(self, result: BotdBotResult):
        """Sets the result of this BotdBot.


        :param result: The result of this BotdBot.  # noqa: E501
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def type(self) -> Optional[str]:
        """Gets the type of this BotdBot.  # noqa: E501


        :return: The type of this BotdBot.  # noqa: E501
        """
        return self._type

    @type.setter
    def type(self, type: Optional[str]):
        """Sets the type of this BotdBot.


        :param type: The type of this BotdBot.  # noqa: E501
        """

        self._type = type

